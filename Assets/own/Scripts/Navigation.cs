using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

public class Navigation : MonoBehaviour
{
    public static Navigation _instance;
    public List<GameObject> enemys = new List<GameObject>();
    public NavMeshAgent myNavMeshAgent;
    public Animator anim;
    float startTime = 0;
    public float AttackTime = 0;
    public Slider slider;
    public GameObject buttle;
    public Transform firePosition;
    public int AttackType = 1;
    public int Att = 50;
    public string name1;
    
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.tag == "enemy" || other.gameObject.tag == "EnemyTower" || other.gameObject.tag == "EnemyMainTowerS" || other.gameObject.tag == "EnemyMainTowerZ" || other.gameObject.tag == "EnemyMainTowerX")
        {
            enemys.Add(other.gameObject);
            Debug.Log("发现敌人！");
            myNavMeshAgent.speed = 0;
            anim.SetBool("attack", true);
            gameObject.transform.LookAt(other.transform.position);

        }
        switch (other.gameObject.tag)
        {
            case "Plane x":
                name1 = "archer mesh敌下";
                break;
            case "Plane z":
                name1 = "archer mesh敌中";
                break;
            case "Plane s":
                name1 = "archer mesh敌上";
                break;
        }
    }
    void Start()
    {
        _instance = this;
        myNavMeshAgent = GetComponent<NavMeshAgent>();
        anim = GetComponent<Animator>();
        //myNavMeshAgent.SetDestination(GameObject.Find(name1).transform.position);
        //anim.SetBool("Run", true);

    }

    void Update()
    {
        for (int i = 0; i < enemys.Count; i++)
        {
            if (enemys[i] == null)
            {
                enemys.RemoveAt(i);
            }
        }
        if (name1 == "archer mesh敌下")
        {

            if (IsWin._isWin.EnemyMainTowerXB == false && enemys.Count <= 0)
            {
                Debug.Log("进入下路");
                anim.SetBool("Run", true);
                myNavMeshAgent.SetDestination(GameObject.Find(name1).transform.position);
                myNavMeshAgent.speed = 1.5f;
            }
        }
        if (name1 == "archer mesh敌中")
        {
            if (IsWin._isWin.EnemyMainTowerZB == false && enemys.Count <= 0)
            {
                Debug.Log("进入中路");
                anim.SetBool("Run", true);
                myNavMeshAgent.SetDestination(GameObject.Find(name1).transform.position);
                myNavMeshAgent.speed = 1.5f;
            }
        }
        if (name1 == "archer mesh敌上")
        {
            if (IsWin._isWin.EnemyMainTowerSB == false && enemys.Count <= 0)
            {
                Debug.Log("进入上路");
                anim.SetBool("Run", true);
                myNavMeshAgent.SetDestination(GameObject.Find(name1).transform.position);
                myNavMeshAgent.speed = 1.5f;
            }
        }
        if (enemys.Count > 0)
        {
            startTime += Time.deltaTime;
            if (startTime >= AttackTime)
            {
                Attack();
                startTime = 0;
            }
            //if (enemys[0].GetComponent<Enemy>().slider.value <= 0)
            //{
            //    myNavMeshAgent.speed = 1.5f;
            //    anim.SetBool("attack", false);
            //    Destroy(enemys[0].GetComponent<Enemy>());
            //    enemys.Remove(enemys[0]);
            //}
            if (enemys[0].tag == "EnemyTower" && enemys[0].transform.parent.GetComponent<EnemyTower>().slider.value <= 0)
            {
                myNavMeshAgent.speed = 1.5f;
                anim.SetBool("attack", false);
                Destroy(enemys[0].transform.parent.GetComponent<EnemyTower>());
                Destroy(enemys[0].transform.parent.gameObject);
                enemys.Remove(enemys[0].transform.parent.gameObject);
            }
            else if (enemys[0].tag == "enemy" && enemys[0].GetComponent<Enemy>().slider.value <= 0)
            {
                myNavMeshAgent.speed = 1.5f;
                anim.SetBool("attack", false);
                Destroy(enemys[0].GetComponent<Enemy>());
                Destroy(enemys[0].gameObject);
                enemys.Remove(enemys[0].gameObject);
           
              
            }
            else if ((enemys[0].tag == "EnemyMainTowerS" || enemys[0].tag == "EnemyMainTowerZ" || enemys[0].tag == "EnemyMainTowerX") && enemys[0].transform.parent.GetComponent<EnemyTower>().slider.value <= 0)
            {
                myNavMeshAgent.speed = 1.5f;
                anim.SetBool("attack", false);
                Destroy(enemys[0].transform.parent.GetComponent<EnemyTower>());
                Destroy(enemys[0].transform.parent.gameObject);
                enemys.Remove(enemys[0].transform.parent.gameObject);
                this.name1 = null;
            }
            //if ((enemys[0].tag == "EnemyMainTower" && enemys[0].transform.parent.GetComponent<EnemyTower>().slider.value <= 0)&& (enemys[0].tag == "EnemyMainTower" && enemys[0].transform.parent.GetComponent<EnemyTower>().slider.value <= 0) && (enemys[0].tag == "EnemyMainTower" && enemys[0].transform.parent.GetComponent<EnemyTower>().slider.value <= 0))
            //{
            //    anim.SetBool("attack", false);
            //    myNavMeshAgent.speed = 0;
            //    //Debug.Log("被我方成功突破");
            //    Game._instance.WinImg.SetActive(true);
            //    Game._instance.WinPanel.SetActive(true);
            //    Time.timeScale = 0;
            //}
        }


        slider.transform.parent.transform.rotation = Camera.main.transform.rotation;
        //if (Vector3.Distance(transform.position, hit.point) < 0.8f)
        //{
        //    anim.SetBool("Run", false);
        //}
        //if (Input.GetMouseButtonDown(1))
        //{
        //    SetDestinationToMousePosition();
        //    anim.SetBool("Run", true);
        //}

    }
 
    void Attack()
    {
        if (enemys == null)
        {
            UpdateEnemys();
        }
        if (enemys.Count > 0 && AttackType == 2)
        {
            if (enemys[0].tag == "EnemyTower")
            {
                GameObject go = Instantiate(buttle, firePosition.position, firePosition.rotation);
                go.GetComponent<Bullet>().SetTarget(enemys[0].transform);

            }

            else if (enemys[0].tag == "enemy")
            {
                GameObject go = Instantiate(buttle, firePosition.position, firePosition.rotation);
                go.GetComponent<Bullet>().SetTarget(enemys[0].transform);

            }
            else if (enemys[0].tag == "EnemyMainTowerS")
            {
                GameObject go = Instantiate(buttle, firePosition.position, firePosition.rotation);
                go.GetComponent<Bullet>().SetTarget(enemys[0].transform);

            }
            else if (enemys[0].tag == "EnemyMainTowerZ")
            {
                GameObject go = Instantiate(buttle, firePosition.position, firePosition.rotation);
                go.GetComponent<Bullet>().SetTarget(enemys[0].transform);

            }
            else if (enemys[0].tag == "EnemyMainTowerX")
            {
                GameObject go = Instantiate(buttle, firePosition.position, firePosition.rotation);
                go.GetComponent<Bullet>().SetTarget(enemys[0].transform);

            }
        }
        if (enemys.Count > 0 && AttackType == 1)
        {
            if (enemys[0].tag == "enemy")
            {
                enemys[0].GetComponent<Enemy>().LessBlood(Att);

            }
            else if (enemys[0].tag == "EnemyTower")
            {
                enemys[0].transform.parent.GetComponent<EnemyTower>().LessBlood(Att);

            }
            else if (enemys[0].tag == "EnemyMainTowerS")
            {
                enemys[0].transform.parent.GetComponent<EnemyTower>().LessBlood(Att);

            }
            else if (enemys[0].tag == "EnemyMainTowerZ")
            {
                enemys[0].transform.parent.GetComponent<EnemyTower>().LessBlood(Att);

            }
            else if (enemys[0].tag == "EnemyMainTowerX")
            {
                enemys[0].transform.parent.GetComponent<EnemyTower>().LessBlood(Att);

            }

        }
        if (enemys.Count <= 0)
        {

            anim.SetBool("attack", false);
            myNavMeshAgent.speed = 1.5f;
        }
    }
    void UpdateEnemys()
    {
        List<int> emptyIndex = new List<int>();
        for (int i = 0; i < enemys.Count; i++)
        {
            if (enemys[i] == null)
            {
                emptyIndex.Add(i);
            }
        }
        for (int index = 0; index < emptyIndex.Count; index++)
        {
            enemys.RemoveAt(emptyIndex[index] - index);
        }
    }
    //void SetDestinationToMousePosition()
    //{

    //    Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
    //    if (Physics.Raycast(ray, out hit))
    //    {
    //        myNavMeshAgent.SetDestination(hit.point);
    //    }
    //}
    public void LessBlood(float att)
    {
        if (slider.value >= 0)
        {
            if (slider.value <= att)
            {
                slider.value = 0;

            }
            //if (slider.value == 0)
            //{
            //    Destroy(gameObject);
            //}

            slider.value -= att;
        }
    }
}

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































